// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum EventVisibility {
  PUBLIC
  PRIVATE
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  role          Role      @default(USER)
  password      String? // hash (bcrypt)

  accounts Account[]
  sessions Session[]
  events   Event[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum RSVPStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Event {
  id                     Int             @id @default(autoincrement())
  slug                   String          @unique
  title                  String
  date                   DateTime
  time                   String
  venueName              String
  venueAddress           String
  description            String?
  coverImageUrl          String?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  latitude               Float?
  longitude              Float?
  mapUrl                 String?
  maxPlusOnesPerGuest    Int?
  ownerId                Int?
  owner                  User?           @relation(fields: [ownerId], references: [id])
  dressCode              String?
  cateringCode           String?
  openBar                Boolean         @default(true)
  hasGiftList            Boolean         @default(true)
  askDietaryRestrictions Boolean         @default(false)
  timeline               Json?
  visibility             EventVisibility @default(PUBLIC)
  guests                 Guest[]
  gifts                  Gift[]
}

model Guest {
  id                  Int        @id @default(autoincrement())
  event               Event      @relation(fields: [eventId], references: [id])
  eventId             Int
  name                String
  email               String
  phone               String?
  plusOnes            Int        @default(0)
  message             String?
  status              RSVPStatus @default(PENDING)
  invitationCode      String?    @unique
  respondedAt         DateTime?
  reservations        Gift[]     @relation("GiftReservation")
  dietaryRestrictions String?

  @@unique([eventId, email])
  @@index([eventId, email])
}

model Gift {
  id          Int     @id @default(autoincrement())
  event       Event   @relation(fields: [eventId], references: [id])
  eventId     Int
  name        String
  description String?
  price       Float?
  storeUrl    String?

  // Reservation (optional)
  reservedBy   Guest?    @relation("GiftReservation", fields: [reservedById], references: [id])
  reservedById Int?
  reservedAt   DateTime?
}
